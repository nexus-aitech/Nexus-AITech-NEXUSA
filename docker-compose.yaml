services:
  api:
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
    image: nexusa/api:latest
    environment:
      APP_PORT: "8000"
      KAFKA_BOOTSTRAP: "redpanda:9092"
      APP_MODULE: "orchestration.fastapi_server:app"
      HEALTH_PATH: "/health"

      CLICKHOUSE__HOST: "clickhouse"
      CLICKHOUSE__PORT: "9000"
      CLICKHOUSE__USER: "default"
      CLICKHOUSE__PASSWORD: ""
      CLICKHOUSE__DATABASE: "default"
    ports:
      - "8000:8000"
    depends_on:
      redis: { condition: service_healthy }
      clickhouse: { condition: service_healthy }
      minio: { condition: service_healthy }
      redpanda: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "python - << 'PY'\nimport os,sys,urllib.request\nurl=f\"http://127.0.0.1:{os.getenv('APP_PORT','8000')}{os.getenv('HEALTH_PATH','/health')}\"\ntry:\n  s=urllib.request.urlopen(url,timeout=3).getcode()\n  sys.exit(0 if s==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - web

  # ===== Frontend Webapp =====
  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    image: nexusa/webapp:latest
    environment:
      NODE_ENV: production
      PORT: "3000"
    ports:
      - "3000:3000"                                # اگر لازم نیست از بیرون، حذف کن
    depends_on:
      api:
        condition: service_healthy                 # دقیق‌تر از service_started
    healthcheck:
      # نیاز به نصب node در ایمیج خود وب‌app ندارد چون از خود node استفاده می‌کند
      test: ["CMD-SHELL", "node -e \"require('http').get('http://127.0.0.1:3000', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s
    restart: unless-stopped
    networks:
      - web

  # ===== ClickHouse =====
  clickhouse:
    image: clickhouse/clickhouse-server:24.8
    container_name: nexusa-clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"
    volumes:
      - clickdata:/var/lib/clickhouse
    ports:
      - "8123:8123"   # HTTP
      - "9005:9000"   # Native (host 9005 -> container 9000)
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --host 127.0.0.1 --query 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - web

  # ===== Redis =====
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    ports:
      - "6379:6379"                                # در صورت عدم نیاز از بیرون، حذف کن
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - web

  # ===== Redpanda (Kafka-compatible) =====
  redpanda:
    image: redpandadata/redpanda:v24.2.9
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --node-id=0
      - --check=false
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://redpanda:9092   # برای مصرف داخل شبکه‌ی داکر کافی است
    ports:
      - "9092:9092"   # Kafka API (اگر فقط داخل شبکه می‌خواهی، حذف کن)
      - "9644:9644"   # Admin API
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info -X brokers=localhost:9092 >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 30s
    restart: unless-stopped
    networks:
      - web

  # ===== MinIO =====
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9002:9000"  # S3 API (در صورت عدم نیاز از بیرون، حذف کن)
      - "9001:9001"  # Console
    healthcheck:
      # از endpoint سلامت داخلی MinIO استفاده می‌کنیم؛ mc داخل این ایمیج وجود ندارد
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - web

  # ===== MinIO Client (init bucket/policy) =====
  minio-mc:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb -p local/mlflow || true &&
      # اگر نمی‌خواهی public باشد، خط زیر را حذف کن یا به 'mc anonymous set none local/mlflow' تغییر بده
      mc policy set public local/mlflow ||
      exit 0
      "
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    networks:
      - web

  # ===== MLflow (با MinIO به‌عنوان S3) =====
  mlflow:
    image: ghcr.io/mlflow/mlflow
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri sqlite:///mlflow.db
      --default-artifact-root s3://mlflow/
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
      AWS_DEFAULT_REGION: us-east-1
    volumes:
      - mlflow_data:/mlflow
    depends_on:
      minio:
        condition: service_healthy
      minio-mc:
        condition: service_started
    ports:
      - "5000:5000"                                # UI اگر از بیرون لازم نیست، حذف کن
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:5000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - web

volumes:
  clickdata:
  redisdata:
  redpanda_data:
  minio_data:
  mlflow_data:

networks:
  web: {}
