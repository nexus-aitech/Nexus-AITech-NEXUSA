services:
  api:
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nexusa-api
    image: nexusa/api:latest
    environment:
      APP_PORT: "8000"
      APP_MODULE: "orchestration.fastapi_server:app"   # ← فقط یکی بمونه
      KAFKA_BOOTSTRAP: "redpanda:9092"
      HEALTH_PATH: "/health"
      REDIS_URL: "redis://:009922333777313@redis:6379/0"
      CLICKHOUSE__HOST: "clickhouse"
      CLICKHOUSE__PORT: "9000"
      CLICKHOUSE__USER: "nexusa"
      CLICKHOUSE__PASSWORD: "009922333777313"
      CLICKHOUSE__DATABASE: "nexusa"
      FRONTEND_ORIGINS: "http://localhost:3001,http://127.0.0.1:3001"
      MLFLOW_TRACKING_URI: "http://mlflow:5000"
      S3_ENDPOINT: "http://minio:9000"
      S3_BUCKET: nexusa
      S3_REGION: us-east-1
      S3_ACCESS_KEY: nexusa
      S3_SECRET_KEY: "009922333777313"
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      ingestion:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - << 'PY'\nimport sys,urllib.request,os\nu='http://127.0.0.1:8000'+os.environ.get('HEALTH_PATH','/health')\ntry:\n  s=urllib.request.urlopen(u, timeout=5).getcode(); sys.exit(0 if s==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY"
        ]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    volumes:
      - ./config.yaml:/app/config.yaml
      - /etc/localtime:/etc/localtime:ro
    networks:
      - web

  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    image: nexusa/webapp:latest
    environment:
      NODE_ENV: production
      HOSTNAME: "0.0.0.0"
      PORT: "3001"
    ports:
      - "3001:3001"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:${PORT:-3001}/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 120s
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - web

  clickhouse:
    image: clickhouse/clickhouse-server:24.8
    container_name: nexusa-clickhouse
    ulimits:
      nofile: { soft: 262144, hard: 262144 }
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: "1"
    volumes:
      - clickdata:/var/lib/clickhouse
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "8123:8123"
      - "9005:9000"
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --host 127.0.0.1 --query 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - web

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - web

  redpanda:
    image: redpandadata/redpanda:v24.2.9
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --node-id=0
      - --check=false
      - --kafka-addr PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:19092
      - --advertise-kafka-addr PLAINTEXT://redpanda:9092,OUTSIDE://localhost:19092
    ports:
      - "9092:9092"
      - "19092:19092"
      - "9644:9644"
    volumes:
      - redpanda_data:/var/lib/redpanda/data
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info -X brokers=localhost:9092 >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 30s
    restart: unless-stopped
    networks:
      - web

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: "009922333777313"
    volumes:
      - minio_data:/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "9002:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - web

  minio-mc:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD &&
      mc mb -p local/mlflow || true &&
      mc anonymous set public local/mlflow ||
      exit 0
      "
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: "009922333777313"
    networks:
      - web

  mlflow:
    image: ghcr.io/mlflow/mlflow
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri sqlite:///mlflow.db
      --default-artifact-root s3://mlflow/
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: nexusa
      AWS_SECRET_ACCESS_KEY: "009922333777313"
      AWS_DEFAULT_REGION: us-east-1
    volumes:
      - mlflow_data:/mlflow
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      minio:
        condition: service_healthy
      minio-mc:
        condition: service_started
    ports:
      - "5000:5000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - << 'PY'\nimport sys,urllib.request\ntry:\n  s=urllib.request.urlopen('http://127.0.0.1:5000/', timeout=5).getcode(); sys.exit(0 if s==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY"
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - web

  ingestion:
    build:
      context: .
      dockerfile: ingestion/Dockerfile
    image: nexusa/ingestion:latest
    command: python -m ingestion.rest_fetcher
    environment:
      KAFKA_BOOTSTRAP: "redpanda:9092"
      REDIS_URL: "redis://:009922333777313@redis:6379/0"
      CLICKHOUSE__HOST: "clickhouse"
      CLICKHOUSE__PORT: "9000"
      CLICKHOUSE__USER: "nexusa"
      CLICKHOUSE__PASSWORD: "009922333777313"
      CLICKHOUSE__DATABASE: "nexusa"
    depends_on:
      redpanda: { condition: service_healthy }
      redis: { condition: service_healthy }
      clickhouse: { condition: service_healthy }
    restart: unless-stopped
    volumes:
      - ./ingestion:/app/ingestion
      - ./core:/app/core
      - /etc/localtime:/etc/localtime:ro
    networks:
      - web

volumes:
  clickdata:
  redisdata:
  redpanda_data:
  minio_data:
  mlflow_data:

networks:
  web: {}
